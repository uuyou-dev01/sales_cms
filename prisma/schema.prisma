generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Item {
  itemId              String             @id
  itemName            String
  itemMfgDate         String?
  itemNumber          String
  itemType            String
  itemBrand           String
  itemCondition       String
  itemRemarks         String?
  itemColor           String?
  itemSize            String
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  deleted             Boolean            @default(false)
  photos              String[]
  position            String?
  warehousePositionId String?
  accessories         String?
  // 潮玩相关字段
  toyCharacterId      String?            // 潮玩角色ID（仅潮玩类商品使用）
  toyVariant          String?            // 潮玩变体，如 "正常款", "隐藏款", "特别色"
  toyCondition        String?            // 潮玩特有成色，如 "未拆盒", "已拆盒", "无盒"
  warehousePosition   WarehousePosition? @relation(fields: [warehousePositionId], references: [id])
  toyCharacter        ToyCharacter?      @relation(fields: [toyCharacterId], references: [id])
  transactions        Transaction[]
  stockAdjustments    StockAdjustment[]
}

model Transaction {
  id                          String    @id @default(cuid())
  itemId                      String
  shipping                    String?
  domesticShipping            String?
  internationalShipping       String?
  domesticTrackingNumber      String?
  internationalTrackingNumber String?
  orderStatus                 String    @default("在途（国内）")
  purchaseDate                DateTime
  soldDate                    DateTime?
  launchDate                  DateTime?
  purchasePlatform            String
  soldPlatform                String?
  listingPlatforms            String[]
  otherFees                   Json?
  purchasePrice               String
  purchasePriceCurrency       String
  purchasePriceExchangeRate   String
  soldPrice                   String?
  soldPriceCurrency           String?
  soldPriceExchangeRate       String?
  itemGrossProfit             String?
  itemNetProfit               String?
  isReturn                    Boolean?
  storageDuration             String?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  item                        Item      @relation(fields: [itemId], references: [itemId])
}

model productRefPrice {
  itemId               String   @id
  itemName             String
  itemMfgDate          String
  itemNumber           String
  itemType             String
  itemBrand            String
  itemCondition        String
  itemRemarks          String
  itemColor            String
  itemStatus           String
  itemSize             String
  refPrice             String
  refPriceCurrency     String
  refPriceExchangeRate String
  refPriceCNY          String
  refDate              DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Warehouse {
  id          String              @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  positions   WarehousePosition[]
}

model WarehousePosition {
  id          String    @id @default(cuid())
  name        String
  capacity    Int
  used        Int       @default(0)
  warehouseId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  items       Item[]
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
}

model Store {
  id          String   @id
  name        String   @unique
  displayName String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  User        User[]
}

model User {
  id        String   @id
  username  String   @unique
  email     String?  @unique
  password  String
  name      String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

enum UserRole {
  ADMIN
  USER
  VIEWER
}

// 潮玩品牌管理
model ToyBrand {
  id          String      @id @default(cuid())
  name        String      @unique // 品牌名称，如 "泡泡玛特"
  description String?     // 品牌描述
  logo        String?     // 品牌logo
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  series      ToySeries[] // 该品牌下的系列
}

// 潮玩系列管理
model ToySeries {
  id          String        @id @default(cuid())
  name        String        // 系列名称，如 "迪士尼family系列"
  brandId     String        // 所属品牌ID
  description String?       // 系列描述
  image       String?       // 系列图片
  releaseDate DateTime?     // 发布日期
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  brand       ToyBrand      @relation(fields: [brandId], references: [id], onDelete: Cascade)
  characters  ToyCharacter[] // 该系列下的角色
  
  @@unique([brandId, name]) // 同一品牌下系列名不能重复
}

// 潮玩角色/款式管理
model ToyCharacter {
  id          String    @id @default(cuid())
  name        String    // 角色名称，如 "米奇", "米妮", "高飞"
  seriesId    String    // 所属系列ID
  description String?   // 角色描述
  image       String?   // 角色图片
  rarity      String?   // 稀有度，如 "普通", "隐藏", "特别款"
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  series      ToySeries @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  items       Item[]    // 该角色的具体商品
  
  @@unique([seriesId, name]) // 同一系列下角色名不能重复
}

// 库存调整记录
model StockAdjustment {
  id             String   @id @default(cuid())
  itemId         String   // 商品ID
  adjustmentType String   // 调整类型: "set", "add", "subtract"
  quantity       Int      // 调整数量
  previousStock  Int      // 调整前库存
  newStock       Int      // 调整后库存
  reason         String   // 调整原因
  remarks        String?  // 备注
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  item           Item     @relation(fields: [itemId], references: [itemId])
}
